basePath: /
definitions:
  entity.Song:
    properties:
      release_date:
        type: string
      song_author:
        type: string
      song_id:
        type: integer
      song_link:
        type: string
      song_name:
        type: string
      song_text:
        type: string
    type: object
  entity.User:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API for Effective Mobile project
  title: Effective Mobile API
  version: "1.0"
paths:
  /music/song/{song_id}:
    delete:
      description: Deletes a song from the database
      parameters:
      - description: Song ID to delete
        in: path
        name: song_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid song id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a song
      tags:
      - songs
  /music/song/{song_id}/{verse}:
    get:
      description: Retrieves a specific number of verses from a song
      parameters:
      - description: Song ID
        in: path
        name: song_id
        required: true
        type: integer
      - description: Number of verses to retrieve
        in: path
        name: verse
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get specific song verses
      tags:
      - songs
  /music/song/new:
    post:
      consumes:
      - application/json
      description: Adds a new song to the database
      parameters:
      - description: New song information
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/entity.Song'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new song
      tags:
      - songs
  /music/songs:
    get:
      description: Retrieves all songs from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Song'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all songs
      tags:
      - songs
  /music/songs/{song_id}:
    get:
      description: Retrieves a specified number of songs
      parameters:
      - description: Number of songs to retrieve
        in: path
        name: song_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Song'
            type: array
        "400":
          description: Invalid page number
          schema:
            type: string
        "500":
          description: Can't get songs
          schema:
            type: string
      summary: Get songs with pagination
      tags:
      - songs
    patch:
      consumes:
      - application/json
      description: Updates an existing song in the database
      parameters:
      - description: Song ID to update
        in: path
        name: song_id
        required: true
        type: integer
      - description: Updated song information
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/entity.Song'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Can't update
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a song
      tags:
      - songs
  /sign-up:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User sign up information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User sign up
      tags:
      - users
  /update:
    patch:
      description: Upgrades a user to admin status
      produces:
      - application/json
      responses:
        "200":
          description: USER UPDATED TO ADMIN
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Become admin
      tags:
      - users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
